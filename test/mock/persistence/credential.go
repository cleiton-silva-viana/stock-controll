// Code generated by MockGen. DO NOT EDIT.
// Source: internal/infrastructure/persistence/credential.go
//
// Generated by this command:
//
//	mockgen -source=internal/infrastructure/persistence/credential.go -destination=test/mock/persistence/credential.go -package=persistencemock
//

// Package persistencemock is a generated GoMock package.
package persistencemock

import (
	reflect "reflect"
	entity "stock-controll/internal/domain/entity"

	gomock "go.uber.org/mock/gomock"
)

// MockISQLCredential is a mock of ISQLCredential interface.
type MockISQLCredential struct {
	ctrl     *gomock.Controller
	recorder *MockISQLCredentialMockRecorder
}

// MockISQLCredentialMockRecorder is the mock recorder for MockISQLCredential.
type MockISQLCredentialMockRecorder struct {
	mock *MockISQLCredential
}

// NewMockISQLCredential creates a new mock instance.
func NewMockISQLCredential(ctrl *gomock.Controller) *MockISQLCredential {
	mock := &MockISQLCredential{ctrl: ctrl}
	mock.recorder = &MockISQLCredentialMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockISQLCredential) EXPECT() *MockISQLCredentialMockRecorder {
	return m.recorder
}

// Save mocks base method.
func (m *MockISQLCredential) Save(credential entity.Credential) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", credential)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockISQLCredentialMockRecorder) Save(credential any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockISQLCredential)(nil).Save), credential)
}
