// Code generated by MockGen. DO NOT EDIT.
// Source: internal/infrastructure/persistence/user.go
//
// Generated by this command:
//
//	mockgen -source=internal/infrastructure/persistence/user.go -destination=test/mock/persistence/user.go -package=persistencemock
//

// Package persistencemock is a generated GoMock package.
package persistencemock

import (
	reflect "reflect"
	entity "stock-controll/internal/domain/entity"

	gomock "go.uber.org/mock/gomock"
)

// MockISQLUser is a mock of ISQLUser interface.
type MockISQLUser struct {
	ctrl     *gomock.Controller
	recorder *MockISQLUserMockRecorder
}

// MockISQLUserMockRecorder is the mock recorder for MockISQLUser.
type MockISQLUserMockRecorder struct {
	mock *MockISQLUser
}

// NewMockISQLUser creates a new mock instance.
func NewMockISQLUser(ctrl *gomock.Controller) *MockISQLUser {
	mock := &MockISQLUser{ctrl: ctrl}
	mock.recorder = &MockISQLUserMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockISQLUser) EXPECT() *MockISQLUserMockRecorder {
	return m.recorder
}

// Save mocks base method.
func (m *MockISQLUser) Save(user entity.User) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", user)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Save indicates an expected call of Save.
func (mr *MockISQLUserMockRecorder) Save(user any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockISQLUser)(nil).Save), user)
}
