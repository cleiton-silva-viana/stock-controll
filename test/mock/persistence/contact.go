// Code generated by MockGen. DO NOT EDIT.
// Source: internal/infrastructure/persistence/contact.go
//
// Generated by this command:
//
//	mockgen -source=internal/infrastructure/persistence/contact.go -destination=test/mock/persistence/contact.go -package=persistencemock
//

// Package persistencemock is a generated GoMock package.
package persistencemock

import (
	reflect "reflect"
	entity "stock-controll/internal/domain/entity"

	gomock "go.uber.org/mock/gomock"
)

// MockISQLContact is a mock of ISQLContact interface.
type MockISQLContact struct {
	ctrl     *gomock.Controller
	recorder *MockISQLContactMockRecorder
}

// MockISQLContactMockRecorder is the mock recorder for MockISQLContact.
type MockISQLContactMockRecorder struct {
	mock *MockISQLContact
}

// NewMockISQLContact creates a new mock instance.
func NewMockISQLContact(ctrl *gomock.Controller) *MockISQLContact {
	mock := &MockISQLContact{ctrl: ctrl}
	mock.recorder = &MockISQLContactMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockISQLContact) EXPECT() *MockISQLContactMockRecorder {
	return m.recorder
}

// Save mocks base method.
func (m *MockISQLContact) Save(contact entity.Contact) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", contact)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockISQLContactMockRecorder) Save(contact any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockISQLContact)(nil).Save), contact)
}
