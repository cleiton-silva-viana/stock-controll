// Code generated by MockGen. DO NOT EDIT.
// Source: internal/domain/repository/credential.go
//
// Generated by this command:
//
//	mockgen -source=internal/domain/repository/credential.go -destination=test/mock/persistence/credentialrepositorymock.go -package=repositorymock
//

// Package repositorymock is a generated GoMock package.
package repositorymock

import (
	reflect "reflect"
	entity "stock-controll/internal/domain/entity"

	gomock "go.uber.org/mock/gomock"
)

// MockICredentialRepository is a mock of ICredentialRepository interface.
type MockICredentialRepository struct {
	ctrl     *gomock.Controller
	recorder *MockICredentialRepositoryMockRecorder
}

// MockICredentialRepositoryMockRecorder is the mock recorder for MockICredentialRepository.
type MockICredentialRepositoryMockRecorder struct {
	mock *MockICredentialRepository
}

// NewMockICredentialRepository creates a new mock instance.
func NewMockICredentialRepository(ctrl *gomock.Controller) *MockICredentialRepository {
	mock := &MockICredentialRepository{ctrl: ctrl}
	mock.recorder = &MockICredentialRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockICredentialRepository) EXPECT() *MockICredentialRepositoryMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockICredentialRepository) Delete(userID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockICredentialRepositoryMockRecorder) Delete(userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockICredentialRepository)(nil).Delete), userID)
}

// Save mocks base method.
func (m *MockICredentialRepository) Save(credential entity.Credential) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", credential)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockICredentialRepositoryMockRecorder) Save(credential any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockICredentialRepository)(nil).Save), credential)
}

// Update mocks base method.
func (m *MockICredentialRepository) Update(credential entity.Credential) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", credential)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockICredentialRepositoryMockRecorder) Update(credential any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockICredentialRepository)(nil).Update), credential)
}
