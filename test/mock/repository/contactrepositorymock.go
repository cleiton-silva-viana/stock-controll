// Code generated by MockGen. DO NOT EDIT.
// Source: internal/domain/repository/contact.go
//
// Generated by this command:
//
//	mockgen -source=internal/domain/repository/contact.go -destination=test/mock/persistence/contactrepositorymock.go -package=repositorymock
//

// Package repositorymock is a generated GoMock package.
package repositorymock

import (
	reflect "reflect"
	entity "stock-controll/internal/domain/entity"

	gomock "go.uber.org/mock/gomock"
)

// MockIContactRepository is a mock of IContactRepository interface.
type MockIContactRepository struct {
	ctrl     *gomock.Controller
	recorder *MockIContactRepositoryMockRecorder
}

// MockIContactRepositoryMockRecorder is the mock recorder for MockIContactRepository.
type MockIContactRepositoryMockRecorder struct {
	mock *MockIContactRepository
}

// NewMockIContactRepository creates a new mock instance.
func NewMockIContactRepository(ctrl *gomock.Controller) *MockIContactRepository {
	mock := &MockIContactRepository{ctrl: ctrl}
	mock.recorder = &MockIContactRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIContactRepository) EXPECT() *MockIContactRepositoryMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockIContactRepository) Delete(ID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockIContactRepositoryMockRecorder) Delete(ID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockIContactRepository)(nil).Delete), ID)
}

// Save mocks base method.
func (m *MockIContactRepository) Save(contact entity.Contact) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", contact)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockIContactRepositoryMockRecorder) Save(contact any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockIContactRepository)(nil).Save), contact)
}

// Update mocks base method.
func (m *MockIContactRepository) Update(contact entity.Contact) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", contact)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockIContactRepositoryMockRecorder) Update(contact any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockIContactRepository)(nil).Update), contact)
}
