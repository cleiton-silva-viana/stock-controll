// Code generated by MockGen. DO NOT EDIT.
// Source: internal/domain/factory/credential.go
//
// Generated by this command:
//
//	mockgen -source=internal/domain/factory/credential.go -destination=test/mock/factory/credential.go -package=factorymock
//

// Package factorymock is a generated GoMock package.
package factorymock

import (
	reflect "reflect"
	dto "stock-controll/internal/application/dto"
	entity "stock-controll/internal/domain/entity"

	gomock "go.uber.org/mock/gomock"
)

// MockICredentialFactory is a mock of ICredentialFactory interface.
type MockICredentialFactory struct {
	ctrl     *gomock.Controller
	recorder *MockICredentialFactoryMockRecorder
}

// MockICredentialFactoryMockRecorder is the mock recorder for MockICredentialFactory.
type MockICredentialFactoryMockRecorder struct {
	mock *MockICredentialFactory
}

// NewMockICredentialFactory creates a new mock instance.
func NewMockICredentialFactory(ctrl *gomock.Controller) *MockICredentialFactory {
	mock := &MockICredentialFactory{ctrl: ctrl}
	mock.recorder = &MockICredentialFactoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockICredentialFactory) EXPECT() *MockICredentialFactoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockICredentialFactory) Create(arg0 dto.CreateCredentialDTO) (*entity.Credential, []error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0)
	ret0, _ := ret[0].(*entity.Credential)
	ret1, _ := ret[1].([]error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockICredentialFactoryMockRecorder) Create(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockICredentialFactory)(nil).Create), arg0)
}
